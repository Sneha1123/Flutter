****************************************************************************
			FLUTTER
****************************************************************************
important sites:
- https://material.io/develop/flutter/
- https://appicon.co/
- https://api.flutter.dev/
- https://www.canva.com/
- https://github.com/londonappbrewery/Flutter-Course-Resources

-----------------------------What is Flutter?------------------------------

- is a UI toolkit that allows developers to design beautiful interfaces for all sorts of devices and screens.
- comes with pre built widgets to layout ur app.
- So, basically instead of building app in ios the ios way or in android the android way, we get variouspre defined widgets which helps us to create apps  without worrying about which platform we are working on.
- creates native apps
- Deploy anywhere

----------------------------Why Flutter?-----------------------------------
- One codebase
- one place to debug
- one place to update
- simple and flexible layout system
- hv access to original source code of flutter

-----------------------Anatomy of Flutter App-------------------------------
- evrything is a widget
- build widgets on widgets
- lets say we decide to create a brand new app:
	1. scaffold -  blank screen for our app
	 1.1. AppBar
	 1.2. Container - containes the content of the app
	  1.2.1. Column - to stack widgets vertically
	   1.2.1.1 Row
	    1.2.1.1.1 Text
	    1.2.1.1.2 Icon
	   1.2.1.2 Text
- widget tree

****************************************************************************
			Creating a new App
****************************************************************************
- go to the directory
- flutter create i_am_rich1

****************************************************************************
			I Am Rich App
****************************************************************************
- instead of MyApp - used MaterialApp
- Most important thing to be presnt in materialApp is:
	home - its where the entire content of the app will be present
- add ',' after every parenthesis ie ')'
- main is the starting point of all our apps
	
	import 'package:flutter/material.dart';

void main() {
  runApp(
    MaterialApp(
      home: Center(
        child: Text("Hello"),
      ),
    ),
  );
}

-------------------------Scaffolding an App-------------------------------	- appBar
- background colour can be changed where is colors are provided by materialApp class and can be used as Colors.colorName

-----------------------Adding asset and icon-------------------------------
- https://appicon.co/ 
 create app icon from here 
- D:\Projects\Flutter\i_am_rich1\android\app\src\main\res
	 replace all the midmap folder with the one created

- for adding assets
	- add assets location to yaml file - yaml follows indentation
	- if have too many images just add the folder location followed by a  '/' in order to include evrything that is present in that folder.
	- flutter packages get
	
---------------------Design App using flutter layout widget----------------
- Difference between hot reload or hot restart
- Hot reload works if something present in stateless or statefull widget changed.
- Stateless widget comes with a method called build which gets called whenever we create a new version of the widget...here MyApp.
- Create a stateless widget named MyApp and move the materialApp code there and in main just mention the MyApp() and instead of returning just a container, we return the materialApp.



	void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
    home: Scaffold(
      body: Container(),
      backgroundColor: Colors.teal,
    ),
  );
  }
}

- Hot restart resets the state of the app.
- Hot reload and hot restart only look at the changes that were made and pushes the changes to the testing device.

--------------------How to use container widgets----------------------------
- similar to a div
- container with no children tries to be as big as possible.
- its a single child layout widget
- when a child is added, the container shrinks to the size of the child widget.
- In order to keep the container away from the notch, time and other areas where it should not be, basically it should be in safe area - we use a widget called Safe Area and place the container inside it.
- other properties of container:
	height
	width
	margin - use EdgeInsets in order to use it - for outside of widget
	padding - so that the child of the container gets its margin, use EdgeInsets - for inside of widget